Задача :
Имеются данные о суммах продаж на каждый месяц.
Нужно написать программу по обработке этих данных.

Програма должна уметь :
1. Считать среднюю сумму продаж за определенный год. - реализовано
2. Находить самый продуктивный месяц в году. - реализовано
3. Находить самый продуктивный месяц за все время
4. Находить самый НЕ продуктивный месяц.

Данные записаны в файле amounts.txt
Каждая строка - это 12 чисел. То есть это суммы продаж за каждый месяц одного года
1я строка - это текущий год, следующая строка - предыдущий, и тд. на убывание.

---------------------------------------------------------------------------------------------

Разработка на занятии :
Мы работаем с массивом double. Это нам дает возможность писать универсальные методы для
работы с обычными массивами. Маленькие универсальные методы могут быть преверены в изоляции
на любых подготовленных данных. По-этому на каждый метод будем писать тест для проверки.
Это облегчит проверку всей программы, так как будем проверять отдельные небольшие части.
Удобней его вынести такие методы отдельный класс. Так основной класс будет меньше (будет легче
ориентироваться в коде) и эти методы можно будет переиспользовать в будушем в других программах.

Рассмотрим немного задачи :

Подсчет средней суммы за год.
    Это обычное нахождение средне-арифметического из всех элементов 1-мерного массива.
    Так как мы работаем с 2-мерными массивами, то напишем для облегчения работы 2 метода :
    ArrayUtilities.countAverage(double[]array) - нахожднение средного в одном массиве
    ArrayUtilities.countAverage(double[][]array, int index) - нахождение среднего в одном из массивов в 2-мерном массиве

Найти самый продуктивный месяц.
    Это нахождение макимального значения в массиве и его индекса.
    Мы можем написать 2 универсальных метода :
    ArrayUtilities.findMax(double[]array)
    ArrayUtilities.findIndexOf(double[]array, double value)

Каждый 1-мерный массив у нас привязан к месяцам, меняться его размер не будет.
Для удобства создадим константы с названиями месяцев и назначим им инексы массива
JANUARY=0 ... DECEMBER=11


Приступим к задачам.

1. Нам нужно написать подсчет средней суммы за год.

У нас уже есть методы для работы с массивами, чтобы найти среднее.
Теперь нам нужен метод для получения года от пользователя.
Пользователь вводит год 2016, мы должны его проверить.
Мы выносим в константу текущий год - 2017.
Введенный пользователем год мы можем проверить по размеру массива с суммами продаж.
Если массив размером 3, то валидные года : 2015, 2016, 2017
Чтобы постоянно не передавать размер массива в метод проверки
сделаем глобальную переменную minYear. В нее мы 1 раз запишем значение после загрузки данных (сдедаем в конце).
Теперь можем написать отдельный метод для проверки введенного года isYearValid(int year)
Вичислим по формуле :  minYear <= введенный год <= текущий
Теперь мы пишим метод, где пользователь вводит год. В этом же методе мы вызовим проверку.
Так как задача этого метода - получить валидный год от пользователя.
Создаем метод getYearFromUser().

Пишим отдельный метод executeAverageByYear(double[][]amounts)
Это как раз и будет полная реализация подсчета средней суммы за год.
 - Получаем валидный год от пользователя методом getYearFromUser()
 - Получаем среднее методом findAverageByYear
 - Выводим результат на экран
Это нормально, что этот метод делает много задач. Мы выносим весь этот функционал отдельно,
чтобы метод main был меньше. При этом функциональность метода остается в пределах подсчета средней суммы.

2. Переходим в следующему пункту. Нужно найти самый продуктивный месяц в году.
Что нужно сделать :
 - Пользователь вводит год
 - Найти самый продуктивный месяц
 - Вывести результат на экран

Самый продуктивный месяц - в котором больше сумма продаж.
У нас уже есть методы для поиска максимального в массиве, и для поиска индекса. Двигаемся дальше.
Мы имеем массив с годами. Но у массива индексы 0,1,2...
Пользователь будет вводить год 2016 и нам нужно год переделать в индекс массива.
Мы определили, что индекс 0 = текущий год (2017)
Так что пишим метод для определения индекса convertYearToIndex(int year)
с формулой : текущий год - введенный год

Мы должны пользователю выводить месяц в нормальном виде : либо цифрой 1-12, либо названием Январь-Декабрь
Выберем 2-й вариант.
У нас уже есть константы привязанные к индексам массива, теперь сделаем метод, которые будет
отдавать название метода по индексу
getMonthName(int value)
Теперь у нас все есть для того, чтобы написать 2-й пункт меню.
Создаем отдельный метод, где соберем весь функционал
executeFindMostProductiveMonth(double[][]amounts)
- Получаем валидный год от пользователя методом getYearFromUser()
- Определяем месяц findMostProductiveMonth
- Выводим результат

3. Пишем цикл в методе main, чтобы программа у нас продолжала работать, пока пользователь не захочет выйти.
Создаем метод для вывода меню на экран printMenu();
Задача этого метода - только вывезти на экран пункты меню.
1. Find average by year
2. Find most productive month by year
3. Exit

Первый пункт должен запускать метод : executeAverageByYear
Второй пункт должен запускать метод : executeFindMostProductiveMonth
Третий делает выход из метода main

3. В последнюю очередь переходим к чтению данных из файла.
Добавляем созданный метод в начале метода main
Делаем метод для определения минимального года - initMinYear.
добавляем его в метод main после загрузки данных данных